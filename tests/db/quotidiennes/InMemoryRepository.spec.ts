import { QuotidienneDTO } from '@/db/quotidiennes/DTO.js';
import { InMemoryQuotidiennesRepository } from '@/db/quotidiennes/InMemoryRepository.js';
import { getArrayFromAsyncGenerator } from '@/lib/generator/generatorUtils.js';
import { describe, expect, it } from 'vitest';

export const dto1: QuotidienneDTO = {
    NUM_POSTE: '01014002',
    NOM_USUEL: 'ARBENT',
    LAT: 46.278167,
    LON: 5.669,
    ALTI: 534,
    AAAAMMJJ: new Date('2023-01-02T00:00:00Z'),
    DHUMEC: 1,
    QDHUMEC: 9,
    PMERM: 2.2,
    QPMERM: 9,
    PMERMIN: 2.2,
    QPMERMIN: 9,
    INST: 1,
    QINST: 9,
    GLOT: 1,
    QGLOT: 9,
    DIFT: 1,
    QDIFT: 9,
    DIRT: 1,
    QDIRT: 9,
    INFRART: 1,
    QINFRART: 9,
    UV: 12,
    QUV: 9,
    UV_INDICEX: 12,
    QUV_INDICEX: 9,
    SIGMA: 100,
    QSIGMA: 9,
    UN: 100,
    QUN: 9,
    HUN: '1230',
    QHUN: 9,
    UX: 100,
    QUX: 9,
    HUX: '1230',
    QHUX: 9,
    UM: 100,
    QUM: 9,
    DHUMI40: 1,
    QDHUMI40: 9,
    DHUMI80: 1,
    QDHUMI80: 9,
    TSVM: 2.2,
    QTSVM: 9,
    ETPMON: 2.2,
    QETPMON: 9,
    ETPGRILLE: 2.2,
    QETPGRILLE: 9,
    ECOULEMENTM: 2.2,
    QECOULEMENTM: 9,
    HNEIGEF: 1,
    QHNEIGEF: 9,
    NEIGETOTX: 1,
    QNEIGETOTX: 9,
    NEIGETOT06: 1,
    QNEIGETOT06: 9,
    NEIG: false,
    QNEIG: 9,
    BROU: false,
    QBROU: 9,
    ORAG: false,
    QORAG: 9,
    GRESIL: false,
    QGRESIL: 9,
    GRELE: false,
    QGRELE: 9,
    ROSEE: false,
    QROSEE: 9,
    VERGLAS: false,
    QVERGLAS: 9,
    SOLNEIGE: false,
    QSOLNEIGE: 9,
    GELEE: false,
    QGELEE: 9,
    FUMEE: false,
    QFUMEE: 9,
    BRUME: false,
    QBRUME: 9,
    ECLAIR: false,
    QECLAIR: 9,
    NB300: 8,
    QNB300: 9,
    BA300: 1,
    QBA300: 9,
    TMERMIN: -3.3,
    QTMERMIN: 9,
    TMERMAX: -3.3,
    QTMERMAX: 9,
};

export const dto2: QuotidienneDTO = {
    NUM_POSTE: '01014002',
    NOM_USUEL: 'ARBENT',
    LAT: 46.278167,
    LON: 5.669,
    ALTI: 534,
    AAAAMMJJ: new Date('2023-01-03T00:00:00Z'),
    DHUMEC: null,
    QDHUMEC: null,
    PMERM: null,
    QPMERM: null,
    PMERMIN: null,
    QPMERMIN: null,
    INST: null,
    QINST: null,
    GLOT: null,
    QGLOT: null,
    DIFT: null,
    QDIFT: null,
    DIRT: null,
    QDIRT: null,
    INFRART: null,
    QINFRART: null,
    UV: null,
    QUV: null,
    UV_INDICEX: null,
    QUV_INDICEX: null,
    SIGMA: null,
    QSIGMA: null,
    UN: null,
    QUN: null,
    HUN: null,
    QHUN: null,
    UX: null,
    QUX: null,
    HUX: null,
    QHUX: null,
    UM: null,
    QUM: null,
    DHUMI40: null,
    QDHUMI40: null,
    DHUMI80: null,
    QDHUMI80: null,
    TSVM: null,
    QTSVM: null,
    ETPMON: null,
    QETPMON: null,
    ETPGRILLE: null,
    QETPGRILLE: null,
    ECOULEMENTM: null,
    QECOULEMENTM: null,
    HNEIGEF: null,
    QHNEIGEF: null,
    NEIGETOTX: null,
    QNEIGETOTX: null,
    NEIGETOT06: null,
    QNEIGETOT06: null,
    NEIG: null,
    QNEIG: null,
    BROU: null,
    QBROU: null,
    ORAG: null,
    QORAG: null,
    GRESIL: null,
    QGRESIL: null,
    GRELE: null,
    QGRELE: null,
    ROSEE: null,
    QROSEE: null,
    VERGLAS: null,
    QVERGLAS: null,
    SOLNEIGE: null,
    QSOLNEIGE: null,
    GELEE: null,
    QGELEE: null,
    FUMEE: null,
    QFUMEE: null,
    BRUME: null,
    QBRUME: null,
    ECLAIR: null,
    QECLAIR: null,
    NB300: null,
    QNB300: null,
    BA300: null,
    QBA300: null,
    TMERMIN: null,
    QTMERMIN: null,
    TMERMAX: null,
    QTMERMAX: null,
};

describe('InMemoryQuotidiennesRepository', () => {
    describe('upsert', () => {
        it('should upsert', async () => {
            const repository = new InMemoryQuotidiennesRepository({ dtos: [] });

            await repository.upsert(dto1);
            await repository.upsert(dto2);
            const dtos1 = await getArrayFromAsyncGenerator(repository.getAll());
            expect(dtos1).toEqual([dto1, dto2]);

            const modifiedDto1: QuotidienneDTO = {
                ...dto1,
                QTMERMAX: 1,
            };

            await repository.upsert(modifiedDto1);
            const dtos2 = await getArrayFromAsyncGenerator(repository.getAll());
            expect(dtos2).toEqual([modifiedDto1, dto2]);
        });
    });
});
